{"version":3,"sources":["webpack:///./src/main/js/apps/issues/crossComponentSourceViewer/utils.ts","webpack:///./src/main/js/apps/issues/crossComponentSourceViewer/SnippetViewer.tsx","webpack:///./src/main/js/apps/issues/crossComponentSourceViewer/ComponentSourceSnippetViewer.tsx","webpack:///./src/main/js/apps/issues/crossComponentSourceViewer/CrossComponentSourceViewerWrapper.tsx"],"names":["LINES_ABOVE","LINES_BELOW","MERGE_DISTANCE","LINES_BELOW_LAST","EXPAND_BY_LINES","collision","_ref","_ref2","_ref3","_slicedToArray","startA","endA","_ref4","startB","rangesToSnippets","ranges","componentLines","map","range","lines","i","start","end","push","filter","snippet","length","expandSnippet","_ref5","direction","snippetIndex","snippets","snippetToExpand","snippetToExpandRange","Math","max","line","forEach","index","snippetRange","min","SCROLL_LEFT_OFFSET","SnippetViewer_SnippetViewer","index_js_exposed","[object Object]","props","super","this","doScroll","element","scroll","parent","node","current","Object","scrolling","leftOffset","rightOffset","getBoundingClientRect","width","expandBlock","displayDuplications","issuesForLine","issueLocations","symbols","verticalBuffer","secondaryIssueLocations","helpers_issueLocations","locations","_this$props","duplications","duplicationsByLine","duplicationsCount","lineDuplications","isSinkLine","some","key","issue","Line","branchLike","displayAllIssues","displayCoverage","displayIssues","displayLocationMarkers","highlighted","highlightedLocationMessage","helpers_lines","highlightedSymbols","issuePopup","issues","last","linePopup","loadDuplications","onIssueChange","onIssuePopupToggle","onIssueSelect","onIssueUnselect","onIssuesClose","handleCloseIssues","onIssuesOpen","handleOpenIssues","onLinePopupToggle","handleLinePopupToggle","onLocationSelect","onSymbolClick","handleSymbolClick","openIssues","openIssuesByLine","previousLine","undefined","renderDuplicationPopup","selectedIssue","_this$props2","component","_this$props2$issuesBy","issuesByLine","locationsByLine","lastLine","measures","parseInt","indexing","bottomLine","issueLine","textRange","endLine","lowestVisibleIssue","keys","k","l","inSnippet","s","duplicated","className","ref","colSpan","aria-label","l10n","onClick","type","ExpandSnippetIcon","renderLine","ComponentSourceSnippetViewer_ComponentSourceSnippetViewer","mounted","state","additionalLines","loading","snippetGroup","extension","from","to","api_components","assign","branches","then","reduce","lineMap","coverageStatus","getCoverageStatus","newLinesMapped","setState","combinedLines","sources","expandComponent","createSnippetsFromProps","arguments","loc","startIndex","startLine","endIndex","firstCollision","keep","createSnippets","_this$props3","_this$state","fullyShown","classnames","source-duplications-expanded","SourceViewerHeaderSlim","expandable","onExpand","sourceViewerFile","renderSnippet","__webpack_require__","d","__webpack_exports__","CrossComponentSourceViewerWrapper_CrossComponentSourceViewerWrapper","components","fetchDuplications","r","duplicatedFiles","files","name","handleIssuePopupToggle","popupName","open","samePopup","handleCloseLinePopup","blocks","helpers_duplications","context","Consumer","openComponent","DuplicationPopup","inRemovedComponent","onClose","fetchIssueFlowSnippets","newProps","issueKey","onLoaded","DeferredSpinner","_this$state2","issuesByComponent","locationsByComponent","currentGroup","currentComponent","groups","path","project","projectName","q","uuid","unknownComponent","groupLocationsByComponent","componentProps","SourceViewerContext","Provider","concat","selectedFlowIndex","value","file"],"mappings":"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","file":"js/372.m.d1afc572.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nconst LINES_ABOVE = 2;\nconst LINES_BELOW = 2;\nexport const MERGE_DISTANCE = 4; // Merge if snippets are four lines away (separated by 3 lines) or fewer\nexport const LINES_BELOW_LAST = 9;\nexport const EXPAND_BY_LINES = 10;\n\nfunction unknownComponent(key: string): T.SnippetsByComponent {\n  return {\n    component: {\n      key,\n      measures: {},\n      path: '',\n      project: '',\n      projectName: '',\n      q: 'FIL',\n      uuid: ''\n    },\n    sources: []\n  };\n}\n\nfunction collision([startA, endA]: number[], [startB, endB]: number[]) {\n  return !(startA > endB + MERGE_DISTANCE || endA < startB - MERGE_DISTANCE);\n}\n\nexport function createSnippets(\n  locations: T.FlowLocation[],\n  componentLines: T.LineMap = {},\n  last: boolean\n): T.SourceLine[][] {\n  return rangesToSnippets(\n    // For each location's range (2 above and 2 below), and then compare with other ranges\n    // to merge snippets that collide.\n    locations.reduce((snippets: Array<{ start: number; end: number }>, loc, index) => {\n      const startIndex = Math.max(1, loc.textRange.startLine - LINES_ABOVE);\n      const endIndex =\n        loc.textRange.endLine +\n        (last && index === locations.length - 1 ? LINES_BELOW_LAST : LINES_BELOW);\n\n      let firstCollision: { start: number; end: number } | undefined;\n\n      // Remove ranges that collide into the first collision\n      snippets = snippets.filter(snippet => {\n        if (collision([snippet.start, snippet.end], [startIndex, endIndex])) {\n          let keep = false;\n          // Check if we've already collided\n          if (!firstCollision) {\n            firstCollision = snippet;\n            keep = true;\n          }\n          // Merge with first collision:\n          firstCollision.start = Math.min(startIndex, snippet.start, firstCollision.start);\n          firstCollision.end = Math.max(endIndex, snippet.end, firstCollision.end);\n\n          // remove the range if it was not the first collision\n          return keep;\n        }\n        return true;\n      });\n\n      if (firstCollision === undefined) {\n        snippets.push({\n          start: startIndex,\n          end: endIndex\n        });\n      }\n\n      return snippets;\n    }, []),\n    componentLines\n  );\n}\n\nfunction rangesToSnippets(\n  ranges: Array<{ start: number; end: number }>,\n  componentLines: T.LineMap\n) {\n  return ranges\n    .map(range => {\n      const lines = [];\n      for (let i = range.start; i <= range.end; i++) {\n        if (componentLines[i]) {\n          lines.push(componentLines[i]);\n        }\n      }\n      return lines;\n    })\n    .filter(snippet => snippet.length > 0);\n}\n\nexport function groupLocationsByComponent(\n  locations: T.FlowLocation[],\n  components: { [key: string]: T.SnippetsByComponent }\n) {\n  let currentComponent = '';\n  let currentGroup: T.SnippetGroup;\n  const groups: T.SnippetGroup[] = [];\n\n  locations.forEach((loc, index) => {\n    if (loc.component !== currentComponent) {\n      currentGroup = {\n        ...(components[loc.component] || unknownComponent(loc.component)),\n        locations: []\n      };\n      groups.push(currentGroup);\n      currentComponent = loc.component;\n    }\n    loc.index = index;\n    currentGroup.locations.push(loc);\n  });\n\n  return groups;\n}\n\nexport function expandSnippet({\n  direction,\n  lines,\n  snippetIndex,\n  snippets\n}: {\n  direction: T.ExpandDirection;\n  lines: T.LineMap;\n  snippetIndex: number;\n  snippets: T.SourceLine[][];\n}) {\n  const snippetToExpand = snippets[snippetIndex];\n\n  const snippetToExpandRange = {\n    start: Math.max(0, snippetToExpand[0].line - (direction === 'up' ? EXPAND_BY_LINES : 0)),\n    end:\n      snippetToExpand[snippetToExpand.length - 1].line +\n      (direction === 'down' ? EXPAND_BY_LINES : 0)\n  };\n\n  const ranges: Array<{ start: number; end: number }> = [];\n\n  snippets.forEach((snippet, index: number) => {\n    const snippetRange = {\n      start: snippet[0].line,\n      end: snippet[snippet.length - 1].line\n    };\n\n    if (index === snippetIndex) {\n      // keep expanded snippet\n      ranges.push(snippetToExpandRange);\n    } else if (\n      collision(\n        [snippetRange.start, snippetRange.end],\n        [snippetToExpandRange.start, snippetToExpandRange.end]\n      )\n    ) {\n      // Merge with expanded snippet\n      snippetToExpandRange.start = Math.min(snippetRange.start, snippetToExpandRange.start);\n      snippetToExpandRange.end = Math.max(snippetRange.end, snippetToExpandRange.end);\n    } else {\n      // No collision, jsut keep the snippet\n      ranges.push(snippetRange);\n    }\n  });\n\n  return rangesToSnippets(ranges, lines);\n}\n\nexport function inSnippet(line: number, snippet: T.SourceLine[]) {\n  return line >= snippet[0].line && line <= snippet[snippet.length - 1].line;\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { inSnippet, LINES_BELOW_LAST } from './utils';\nimport ExpandSnippetIcon from '../../../components/icons-components/ExpandSnippetIcon';\nimport Line from '../../../components/SourceViewer/components/Line';\nimport { symbolsByLine } from '../../../components/SourceViewer/helpers/indexing';\nimport { getSecondaryIssueLocationsForLine } from '../../../components/SourceViewer/helpers/issueLocations';\nimport {\n  optimizeLocationMessage,\n  optimizeHighlightedSymbols,\n  optimizeSelectedIssue\n} from '../../../components/SourceViewer/helpers/lines';\nimport { translate } from '../../../helpers/l10n';\nimport { scrollHorizontally } from '../../../helpers/scrolling';\n\ninterface Props {\n  branchLike: T.BranchLike | undefined;\n  component: T.SourceViewerFile;\n  duplications?: T.Duplication[];\n  duplicationsByLine?: { [line: number]: number[] };\n  expandBlock: (snippetIndex: number, direction: T.ExpandDirection) => void;\n  handleCloseIssues: (line: T.SourceLine) => void;\n  handleLinePopupToggle: (line: T.SourceLine) => void;\n  handleOpenIssues: (line: T.SourceLine) => void;\n  handleSymbolClick: (symbols: string[]) => void;\n  highlightedLocationMessage: { index: number; text: string | undefined } | undefined;\n  highlightedSymbols: string[];\n  index: number;\n  issue: T.Issue;\n  issuePopup?: { issue: string; name: string };\n  issuesByLine: T.IssuesByLine;\n  last: boolean;\n  linePopup?: T.LinePopup;\n  loadDuplications: (line: T.SourceLine) => void;\n  locations: T.FlowLocation[];\n  locationsByLine: { [line: number]: T.LinearIssueLocation[] };\n  onIssueChange: (issue: T.Issue) => void;\n  onIssuePopupToggle: (issue: string, popupName: string, open?: boolean) => void;\n  onLocationSelect: (index: number) => void;\n  openIssuesByLine: T.Dict<boolean>;\n  renderDuplicationPopup: (index: number, line: number) => React.ReactNode;\n  scroll?: (element: HTMLElement) => void;\n  snippet: T.SourceLine[];\n}\n\nconst SCROLL_LEFT_OFFSET = 32;\n\nexport default class SnippetViewer extends React.PureComponent<Props> {\n  node: React.RefObject<HTMLDivElement>;\n\n  constructor(props: Props) {\n    super(props);\n    this.node = React.createRef();\n  }\n\n  doScroll = (element: HTMLElement) => {\n    if (this.props.scroll) {\n      this.props.scroll(element);\n    }\n    const parent = this.node.current as Element;\n\n    if (parent) {\n      scrollHorizontally(element, {\n        leftOffset: SCROLL_LEFT_OFFSET,\n        rightOffset: parent.getBoundingClientRect().width - SCROLL_LEFT_OFFSET,\n        parent\n      });\n    }\n  };\n\n  expandBlock = (direction: T.ExpandDirection) => () =>\n    this.props.expandBlock(this.props.index, direction);\n\n  renderLine({\n    displayDuplications,\n    index,\n    issuesForLine,\n    issueLocations,\n    line,\n    snippet,\n    symbols,\n    verticalBuffer\n  }: {\n    displayDuplications: boolean;\n    index: number;\n    issuesForLine: T.Issue[];\n    issueLocations: T.LinearIssueLocation[];\n    line: T.SourceLine;\n    snippet: T.SourceLine[];\n    symbols: string[];\n    verticalBuffer: number;\n  }) {\n    const secondaryIssueLocations = getSecondaryIssueLocationsForLine(line, this.props.locations);\n\n    const { duplications, duplicationsByLine } = this.props;\n    const duplicationsCount = duplications ? duplications.length : 0;\n    const lineDuplications =\n      (duplicationsCount && duplicationsByLine && duplicationsByLine[line.line]) || [];\n\n    const isSinkLine = issuesForLine.some(i => i.key === this.props.issue.key);\n\n    return (\n      <Line\n        branchLike={this.props.branchLike}\n        displayAllIssues={false}\n        displayCoverage={true}\n        displayDuplications={displayDuplications}\n        displayIssues={!isSinkLine || issuesForLine.length > 1}\n        displayLocationMarkers={true}\n        duplications={lineDuplications}\n        duplicationsCount={duplicationsCount}\n        highlighted={false}\n        highlightedLocationMessage={optimizeLocationMessage(\n          this.props.highlightedLocationMessage,\n          secondaryIssueLocations\n        )}\n        highlightedSymbols={optimizeHighlightedSymbols(symbols, this.props.highlightedSymbols)}\n        issueLocations={issueLocations}\n        issuePopup={this.props.issuePopup}\n        issues={issuesForLine}\n        key={line.line}\n        last={false}\n        line={line}\n        linePopup={this.props.linePopup}\n        loadDuplications={this.props.loadDuplications}\n        onIssueChange={this.props.onIssueChange}\n        onIssuePopupToggle={this.props.onIssuePopupToggle}\n        onIssueSelect={() => {}}\n        onIssueUnselect={() => {}}\n        onIssuesClose={this.props.handleCloseIssues}\n        onIssuesOpen={this.props.handleOpenIssues}\n        onLinePopupToggle={this.props.handleLinePopupToggle}\n        onLocationSelect={this.props.onLocationSelect}\n        onSymbolClick={this.props.handleSymbolClick}\n        openIssues={this.props.openIssuesByLine[line.line]}\n        previousLine={index > 0 ? snippet[index - 1] : undefined}\n        renderDuplicationPopup={this.props.renderDuplicationPopup}\n        scroll={this.doScroll}\n        secondaryIssueLocations={secondaryIssueLocations}\n        selectedIssue={optimizeSelectedIssue(this.props.issue.key, issuesForLine)}\n        verticalBuffer={verticalBuffer}\n      />\n    );\n  }\n\n  render() {\n    const {\n      component,\n      issue,\n      issuesByLine = {},\n      last,\n      locationsByLine,\n      openIssuesByLine,\n      snippet\n    } = this.props;\n    const lastLine =\n      component.measures && component.measures.lines && parseInt(component.measures.lines, 10);\n\n    const symbols = symbolsByLine(snippet);\n\n    const bottomLine = snippet[snippet.length - 1].line;\n    const issueLine = issue.textRange ? issue.textRange.endLine : issue.line;\n    const lowestVisibleIssue = Math.max(\n      ...Object.keys(issuesByLine)\n        .map(k => parseInt(k, 10))\n        .filter(l => inSnippet(l, snippet) && (l === issueLine || openIssuesByLine[l]))\n    );\n    const verticalBuffer = last\n      ? Math.max(0, LINES_BELOW_LAST - (bottomLine - lowestVisibleIssue))\n      : 0;\n\n    const displayDuplications = snippet.some(s => !!s.duplicated);\n\n    return (\n      <div className=\"source-viewer-code snippet\" ref={this.node}>\n        <table className=\"source-table\">\n          <tbody>\n            {snippet[0].line > 1 && (\n              <tr className=\"expand-block expand-block-above\">\n                <td colSpan={5}>\n                  <button\n                    aria-label={translate('source_viewer.expand_above')}\n                    onClick={this.expandBlock('up')}\n                    type=\"button\">\n                    <ExpandSnippetIcon />\n                  </button>\n                </td>\n              </tr>\n            )}\n            {snippet.map((line, index) =>\n              this.renderLine({\n                displayDuplications,\n                index,\n                issuesForLine: issuesByLine[line.line] || [],\n                issueLocations: locationsByLine[line.line] || [],\n                line,\n                snippet,\n                symbols: symbols[line.line],\n                verticalBuffer: index === snippet.length - 1 ? verticalBuffer : 0\n              })\n            )}\n            {(!lastLine || snippet[snippet.length - 1].line < lastLine) && (\n              <tr className=\"expand-block expand-block-below\">\n                <td colSpan={5}>\n                  <button\n                    aria-label={translate('source_viewer.expand_below')}\n                    onClick={this.expandBlock('down')}\n                    type=\"button\">\n                    <ExpandSnippetIcon />\n                  </button>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { createSnippets, expandSnippet, EXPAND_BY_LINES, MERGE_DISTANCE } from './utils';\nimport SnippetViewer from './SnippetViewer';\nimport SourceViewerHeaderSlim from '../../../components/SourceViewer/SourceViewerHeaderSlim';\nimport getCoverageStatus from '../../../components/SourceViewer/helpers/getCoverageStatus';\nimport { getSources } from '../../../api/components';\nimport { locationsByLine } from '../../../components/SourceViewer/helpers/indexing';\nimport { getBranchLikeQuery } from '../../../helpers/branches';\n\ninterface Props {\n  branchLike: T.BranchLike | undefined;\n  duplications?: T.Duplication[];\n  duplicationsByLine?: { [line: number]: number[] };\n  highlightedLocationMessage: { index: number; text: string | undefined } | undefined;\n  issue: T.Issue;\n  issuePopup?: { issue: string; name: string };\n  issuesByLine: T.IssuesByLine;\n  last: boolean;\n  linePopup?: T.LinePopup;\n  loadDuplications: (component: string, line: T.SourceLine) => void;\n  locations: T.FlowLocation[];\n  onIssueChange: (issue: T.Issue) => void;\n  onIssuePopupToggle: (issue: string, popupName: string, open?: boolean) => void;\n  onLinePopupToggle: (linePopup: T.LinePopup & { component: string }) => void;\n  onLocationSelect: (index: number) => void;\n  renderDuplicationPopup: (\n    component: T.SourceViewerFile,\n    index: number,\n    line: number\n  ) => React.ReactNode;\n  scroll?: (element: HTMLElement) => void;\n  snippetGroup: T.SnippetGroup;\n}\n\ninterface State {\n  additionalLines: { [line: number]: T.SourceLine };\n  highlightedSymbols: string[];\n  loading: boolean;\n  openIssuesByLine: T.Dict<boolean>;\n  snippets: T.SourceLine[][];\n}\n\nexport default class ComponentSourceSnippetViewer extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = {\n    additionalLines: {},\n    highlightedSymbols: [],\n    loading: false,\n    openIssuesByLine: {},\n    snippets: []\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.createSnippetsFromProps();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  createSnippetsFromProps() {\n    const snippets = createSnippets(\n      this.props.snippetGroup.locations,\n      this.props.snippetGroup.sources,\n      this.props.last\n    );\n    this.setState({ snippets });\n  }\n\n  expandBlock = (snippetIndex: number, direction: T.ExpandDirection) => {\n    const { branchLike, snippetGroup } = this.props;\n    const { key } = snippetGroup.component;\n    const { snippets } = this.state;\n\n    const snippet = snippets[snippetIndex];\n\n    // Extend by EXPAND_BY_LINES and add buffer for merging snippets\n    const extension = EXPAND_BY_LINES + MERGE_DISTANCE - 1;\n\n    const range =\n      direction === 'up'\n        ? {\n            from: Math.max(1, snippet[0].line - extension),\n            to: snippet[0].line - 1\n          }\n        : {\n            from: snippet[snippet.length - 1].line + 1,\n            to: snippet[snippet.length - 1].line + extension\n          };\n\n    getSources({\n      key,\n      ...range,\n      ...getBranchLikeQuery(branchLike)\n    })\n      .then(lines =>\n        lines.reduce((lineMap: T.Dict<T.SourceLine>, line) => {\n          line.coverageStatus = getCoverageStatus(line);\n          lineMap[line.line] = line;\n          return lineMap;\n        }, {})\n      )\n      .then(\n        newLinesMapped => {\n          if (this.mounted) {\n            this.setState(({ additionalLines, snippets }) => {\n              const combinedLines = { ...additionalLines, ...newLinesMapped };\n\n              return {\n                additionalLines: combinedLines,\n                snippets: expandSnippet({\n                  direction,\n                  lines: { ...combinedLines, ...this.props.snippetGroup.sources },\n                  snippetIndex,\n                  snippets\n                })\n              };\n            });\n          }\n        },\n        () => {}\n      );\n  };\n\n  expandComponent = () => {\n    const { branchLike, snippetGroup } = this.props;\n    const { key } = snippetGroup.component;\n\n    this.setState({ loading: true });\n\n    getSources({ key, ...getBranchLikeQuery(branchLike) }).then(\n      lines => {\n        if (this.mounted) {\n          this.setState({ loading: false, snippets: [lines] });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  handleLinePopupToggle = (linePopup: T.LinePopup) => {\n    this.props.onLinePopupToggle({\n      ...linePopup,\n      component: this.props.snippetGroup.component.key\n    });\n  };\n\n  handleOpenIssues = (line: T.SourceLine) => {\n    this.setState(state => ({\n      openIssuesByLine: { ...state.openIssuesByLine, [line.line]: true }\n    }));\n  };\n\n  handleCloseIssues = (line: T.SourceLine) => {\n    this.setState(state => ({\n      openIssuesByLine: { ...state.openIssuesByLine, [line.line]: false }\n    }));\n  };\n\n  handleSymbolClick = (highlightedSymbols: string[]) => {\n    this.setState({ highlightedSymbols });\n  };\n\n  loadDuplications = (line: T.SourceLine) => {\n    this.props.loadDuplications(this.props.snippetGroup.component.key, line);\n  };\n\n  renderDuplicationPopup = (index: number, line: number) => {\n    return this.props.renderDuplicationPopup(this.props.snippetGroup.component, index, line);\n  };\n\n  renderSnippet({\n    index,\n    issuesByLine,\n    last,\n    locationsByLine,\n    snippet\n  }: {\n    index: number;\n    issuesByLine: T.IssuesByLine;\n    last: boolean;\n    locationsByLine: { [line: number]: T.LinearIssueLocation[] };\n    snippet: T.SourceLine[];\n  }) {\n    return (\n      <SnippetViewer\n        branchLike={this.props.branchLike}\n        component={this.props.snippetGroup.component}\n        expandBlock={this.expandBlock}\n        handleCloseIssues={this.handleCloseIssues}\n        handleLinePopupToggle={this.handleLinePopupToggle}\n        handleOpenIssues={this.handleOpenIssues}\n        handleSymbolClick={this.handleSymbolClick}\n        highlightedLocationMessage={this.props.highlightedLocationMessage}\n        highlightedSymbols={this.state.highlightedSymbols}\n        index={index}\n        issue={this.props.issue}\n        issuePopup={this.props.issuePopup}\n        issuesByLine={issuesByLine}\n        key={index}\n        last={last}\n        loadDuplications={this.loadDuplications}\n        locations={this.props.locations}\n        locationsByLine={locationsByLine}\n        onIssueChange={this.props.onIssueChange}\n        onIssuePopupToggle={this.props.onIssuePopupToggle}\n        onLocationSelect={this.props.onLocationSelect}\n        openIssuesByLine={this.state.openIssuesByLine}\n        renderDuplicationPopup={this.renderDuplicationPopup}\n        scroll={this.props.scroll}\n        snippet={snippet}\n      />\n    );\n  }\n\n  render() {\n    const { branchLike, duplications, issue, issuesByLine, last, snippetGroup } = this.props;\n    const { loading, snippets } = this.state;\n    const locations = locationsByLine([issue]);\n\n    const fullyShown =\n      snippets.length === 1 &&\n      snippetGroup.component.measures &&\n      snippets[0].length === parseInt(snippetGroup.component.measures.lines || '', 10);\n\n    return (\n      <div\n        className={classNames('component-source-container', {\n          'source-duplications-expanded': duplications && duplications.length > 0\n        })}>\n        <SourceViewerHeaderSlim\n          branchLike={branchLike}\n          expandable={!fullyShown}\n          loading={loading}\n          onExpand={this.expandComponent}\n          sourceViewerFile={snippetGroup.component}\n        />\n        {snippets.map((snippet, index) =>\n          this.renderSnippet({\n            snippet,\n            index,\n            issuesByLine: last ? issuesByLine : {},\n            locationsByLine: last && index === snippets.length - 1 ? locations : {},\n            last: last && index === snippets.length - 1\n          })\n        )}\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ComponentSourceSnippetViewer from './ComponentSourceSnippetViewer';\nimport { groupLocationsByComponent } from './utils';\nimport DeferredSpinner from '../../../components/common/DeferredSpinner';\nimport DuplicationPopup from '../../../components/SourceViewer/components/DuplicationPopup';\nimport { SourceViewerContext } from '../../../components/SourceViewer/SourceViewerContext';\nimport { WorkspaceContext } from '../../../components/workspace/context';\nimport { getIssueFlowSnippets } from '../../../api/issues';\nimport {\n  filterDuplicationBlocksByLine,\n  isDuplicationBlockInRemovedComponent,\n  getDuplicationBlocksForIndex\n} from '../../../components/SourceViewer/helpers/duplications';\nimport {\n  duplicationsByLine,\n  issuesByComponentAndLine\n} from '../../../components/SourceViewer/helpers/indexing';\nimport { getDuplications } from '../../../api/components';\nimport { getBranchLikeQuery } from '../../../helpers/branches';\n\ninterface Props {\n  branchLike: T.Branch | T.PullRequest | undefined;\n  highlightedLocationMessage?: { index: number; text: string | undefined };\n  issue: T.Issue;\n  issues: T.Issue[];\n  locations: T.FlowLocation[];\n  onIssueChange: (issue: T.Issue) => void;\n  onLoaded?: () => void;\n  onLocationSelect: (index: number) => void;\n  scroll?: (element: HTMLElement) => void;\n  selectedFlowIndex: number | undefined;\n}\n\ninterface State {\n  components: T.Dict<T.SnippetsByComponent>;\n  duplicatedFiles?: T.Dict<T.DuplicatedFile>;\n  duplications?: T.Duplication[];\n  duplicationsByLine: { [line: number]: number[] };\n  issuePopup?: { issue: string; name: string };\n  linePopup?: T.LinePopup & { component: string };\n  loading: boolean;\n}\n\nexport default class CrossComponentSourceViewerWrapper extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = {\n    components: {},\n    duplicationsByLine: {},\n    loading: true\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchIssueFlowSnippets(this.props.issue.key);\n  }\n\n  componentWillReceiveProps(newProps: Props) {\n    if (newProps.issue.key !== this.props.issue.key) {\n      this.fetchIssueFlowSnippets(newProps.issue.key);\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchDuplications = (component: string, line: T.SourceLine) => {\n    getDuplications({\n      key: component,\n      ...getBranchLikeQuery(this.props.branchLike)\n    }).then(\n      r => {\n        if (this.mounted) {\n          this.setState(state => ({\n            duplicatedFiles: r.files,\n            duplications: r.duplications,\n            duplicationsByLine: duplicationsByLine(r.duplications),\n            linePopup:\n              r.duplications.length === 1\n                ? { component, index: 0, line: line.line, name: 'duplications' }\n                : state.linePopup\n          }));\n        }\n      },\n      () => {}\n    );\n  };\n\n  fetchIssueFlowSnippets(issueKey: string) {\n    this.setState({ loading: true });\n    getIssueFlowSnippets(issueKey).then(\n      components => {\n        if (this.mounted) {\n          this.setState({\n            components,\n            issuePopup: undefined,\n            linePopup: undefined,\n            loading: false\n          });\n          if (this.props.onLoaded) {\n            this.props.onLoaded();\n          }\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  }\n\n  handleIssuePopupToggle = (issue: string, popupName: string, open?: boolean) => {\n    this.setState((state: State) => {\n      const samePopup =\n        state.issuePopup && state.issuePopup.name === popupName && state.issuePopup.issue === issue;\n      if (open !== false && !samePopup) {\n        return { issuePopup: { issue, name: popupName } };\n      } else if (open !== true && samePopup) {\n        return { issuePopup: undefined };\n      }\n      return null;\n    });\n  };\n\n  handleLinePopupToggle = ({\n    component,\n    index,\n    line,\n    name,\n    open\n  }: T.LinePopup & { component: string }) => {\n    this.setState((state: State) => {\n      const samePopup =\n        state.linePopup !== undefined &&\n        state.linePopup.line === line &&\n        state.linePopup.name === name &&\n        state.linePopup.component === component &&\n        state.linePopup.index === index;\n      if (open !== false && !samePopup) {\n        return { linePopup: { component, index, line, name } };\n      } else if (open !== true && samePopup) {\n        return { linePopup: undefined };\n      }\n      return null;\n    });\n  };\n\n  handleCloseLinePopup = () => {\n    this.setState({ linePopup: undefined });\n  };\n\n  renderDuplicationPopup = (component: T.SourceViewerFile, index: number, line: number) => {\n    const { duplicatedFiles, duplications } = this.state;\n\n    if (!component || !duplicatedFiles) {\n      return null;\n    }\n\n    const blocks = getDuplicationBlocksForIndex(duplications, index);\n\n    return (\n      <WorkspaceContext.Consumer>\n        {({ openComponent }) => (\n          <DuplicationPopup\n            blocks={filterDuplicationBlocksByLine(blocks, line)}\n            branchLike={this.props.branchLike}\n            duplicatedFiles={duplicatedFiles}\n            inRemovedComponent={isDuplicationBlockInRemovedComponent(blocks)}\n            onClose={this.handleCloseLinePopup}\n            openComponent={openComponent}\n            sourceViewerFile={component}\n          />\n        )}\n      </WorkspaceContext.Consumer>\n    );\n  };\n\n  render() {\n    const { loading } = this.state;\n\n    if (loading) {\n      return (\n        <div>\n          <DeferredSpinner />\n        </div>\n      );\n    }\n\n    const { components, duplications, duplicationsByLine, linePopup } = this.state;\n    const issuesByComponent = issuesByComponentAndLine(this.props.issues);\n    const locationsByComponent = groupLocationsByComponent(this.props.locations, components);\n\n    return (\n      <div>\n        {locationsByComponent.map((snippetGroup, i) => {\n          let componentProps = {};\n          if (linePopup && snippetGroup.component.key === linePopup.component) {\n            componentProps = {\n              duplications,\n              duplicationsByLine,\n              linePopup: { index: linePopup.index, line: linePopup.line, name: linePopup.name }\n            };\n          }\n          return (\n            <SourceViewerContext.Provider\n              key={`${this.props.issue.key}-${this.props.selectedFlowIndex}-${i}`}\n              value={{ branchLike: this.props.branchLike, file: snippetGroup.component }}>\n              <ComponentSourceSnippetViewer\n                branchLike={this.props.branchLike}\n                highlightedLocationMessage={this.props.highlightedLocationMessage}\n                issue={this.props.issue}\n                issuePopup={this.state.issuePopup}\n                issuesByLine={issuesByComponent[snippetGroup.component.key] || {}}\n                last={i === locationsByComponent.length - 1}\n                loadDuplications={this.fetchDuplications}\n                locations={snippetGroup.locations || []}\n                onIssueChange={this.props.onIssueChange}\n                onIssuePopupToggle={this.handleIssuePopupToggle}\n                onLinePopupToggle={this.handleLinePopupToggle}\n                onLocationSelect={this.props.onLocationSelect}\n                renderDuplicationPopup={this.renderDuplicationPopup}\n                scroll={this.props.scroll}\n                snippetGroup={snippetGroup}\n                {...componentProps}\n              />\n            </SourceViewerContext.Provider>\n          );\n        })}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}