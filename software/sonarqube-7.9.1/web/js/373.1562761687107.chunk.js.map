{"version":3,"sources":["webpack:///./src/main/js/apps/issues/crossComponentSourceViewer/utils.ts","webpack:///./src/main/js/apps/issues/crossComponentSourceViewer/SnippetViewer.tsx","webpack:///./src/main/js/apps/issues/crossComponentSourceViewer/ComponentSourceSnippetViewer.tsx","webpack:///./src/main/js/apps/issues/crossComponentSourceViewer/CrossComponentSourceViewerWrapper.tsx"],"names":["LINES_ABOVE","LINES_BELOW","MERGE_DISTANCE","LINES_BELOW_LAST","EXPAND_BY_LINES","collision","_a","_b","startA","endA","startB","rangesToSnippets","ranges","componentLines","map","range","lines","i","start","end","push","filter","snippet","length","expandSnippet","direction","snippetIndex","snippets","snippetToExpand","snippetToExpandRange","Math","max","line","forEach","index","snippetRange","min","SCROLL_LEFT_OFFSET","_super","SnippetViewer","props","_this","call","this","doScroll","element","scroll","parent","node","current","Object","scrolling","leftOffset","rightOffset","getBoundingClientRect","width","expandBlock","index_js_exposed","__extends","prototype","renderLine","displayDuplications","issuesForLine","issueLocations","symbols","verticalBuffer","secondaryIssueLocations","helpers_issueLocations","locations","duplications","duplicationsByLine","duplicationsCount","lineDuplications","isSinkLine","some","key","issue","Line","branchLike","displayAllIssues","displayCoverage","displayIssues","displayLocationMarkers","highlighted","highlightedLocationMessage","helpers_lines","highlightedSymbols","issuePopup","issues","last","linePopup","loadDuplications","onIssueChange","onIssuePopupToggle","onIssueSelect","onIssueUnselect","onIssuesClose","handleCloseIssues","onIssuesOpen","handleOpenIssues","onLinePopupToggle","handleLinePopupToggle","onLocationSelect","onSymbolClick","handleSymbolClick","openIssues","openIssuesByLine","previousLine","undefined","renderDuplicationPopup","selectedIssue","render","component","issuesByLine","locationsByLine","lastLine","measures","parseInt","indexing","bottomLine","issueLine","textRange","endLine","lowestVisibleIssue","apply","keys","k","l","inSnippet","s","duplicated","className","ref","colSpan","aria-label","l10n","onClick","type","ExpandSnippetIcon","ComponentSourceSnippetViewer","arguments","mounted","state","additionalLines","loading","snippetGroup","extension","from","to","api_components","ComponentSourceSnippetViewer_assign","branches","then","reduce","lineMap","coverageStatus","getCoverageStatus","newLinesMapped","setState","combinedLines","sources","expandComponent","ComponentSourceSnippetViewer_extends","componentDidMount","createSnippetsFromProps","componentWillUnmount","loc","firstCollision","startIndex","startLine","endIndex","keep","renderSnippet","crossComponentSourceViewer_SnippetViewer","fullyShown","classnames","source-duplications-expanded","SourceViewerHeaderSlim","expandable","onExpand","sourceViewerFile","CrossComponentSourceViewerWrapper_CrossComponentSourceViewerWrapper","CrossComponentSourceViewerWrapper","components","fetchDuplications","CrossComponentSourceViewerWrapper_assign","r","duplicatedFiles","files","name","handleIssuePopupToggle","popupName","open","samePopup","handleCloseLinePopup","blocks","helpers_duplications","context","Consumer","openComponent","DuplicationPopup","inRemovedComponent","onClose","CrossComponentSourceViewerWrapper_extends","fetchIssueFlowSnippets","componentWillReceiveProps","newProps","issueKey","onLoaded","DeferredSpinner","issuesByComponent","locationsByComponent","currentGroup","currentComponent","groups","__assign","path","project","projectName","q","uuid","groupLocationsByComponent","componentProps","SourceViewerContext","Provider","selectedFlowIndex","value","file","crossComponentSourceViewer_ComponentSourceSnippetViewer"],"mappings":"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","file":"js/373.1562761687107.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nconst LINES_ABOVE = 2;\nconst LINES_BELOW = 2;\nexport const MERGE_DISTANCE = 4; // Merge if snippets are four lines away (separated by 3 lines) or fewer\nexport const LINES_BELOW_LAST = 9;\nexport const EXPAND_BY_LINES = 10;\n\nfunction unknownComponent(key: string): T.SnippetsByComponent {\n  return {\n    component: {\n      key,\n      measures: {},\n      path: '',\n      project: '',\n      projectName: '',\n      q: 'FIL',\n      uuid: ''\n    },\n    sources: []\n  };\n}\n\nfunction collision([startA, endA]: number[], [startB, endB]: number[]) {\n  return !(startA > endB + MERGE_DISTANCE || endA < startB - MERGE_DISTANCE);\n}\n\nexport function createSnippets(\n  locations: T.FlowLocation[],\n  componentLines: T.LineMap = {},\n  last: boolean\n): T.SourceLine[][] {\n  return rangesToSnippets(\n    // For each location's range (2 above and 2 below), and then compare with other ranges\n    // to merge snippets that collide.\n    locations.reduce((snippets: Array<{ start: number; end: number }>, loc, index) => {\n      const startIndex = Math.max(1, loc.textRange.startLine - LINES_ABOVE);\n      const endIndex =\n        loc.textRange.endLine +\n        (last && index === locations.length - 1 ? LINES_BELOW_LAST : LINES_BELOW);\n\n      let firstCollision: { start: number; end: number } | undefined;\n\n      // Remove ranges that collide into the first collision\n      snippets = snippets.filter(snippet => {\n        if (collision([snippet.start, snippet.end], [startIndex, endIndex])) {\n          let keep = false;\n          // Check if we've already collided\n          if (!firstCollision) {\n            firstCollision = snippet;\n            keep = true;\n          }\n          // Merge with first collision:\n          firstCollision.start = Math.min(startIndex, snippet.start, firstCollision.start);\n          firstCollision.end = Math.max(endIndex, snippet.end, firstCollision.end);\n\n          // remove the range if it was not the first collision\n          return keep;\n        }\n        return true;\n      });\n\n      if (firstCollision === undefined) {\n        snippets.push({\n          start: startIndex,\n          end: endIndex\n        });\n      }\n\n      return snippets;\n    }, []),\n    componentLines\n  );\n}\n\nfunction rangesToSnippets(\n  ranges: Array<{ start: number; end: number }>,\n  componentLines: T.LineMap\n) {\n  return ranges\n    .map(range => {\n      const lines = [];\n      for (let i = range.start; i <= range.end; i++) {\n        if (componentLines[i]) {\n          lines.push(componentLines[i]);\n        }\n      }\n      return lines;\n    })\n    .filter(snippet => snippet.length > 0);\n}\n\nexport function groupLocationsByComponent(\n  locations: T.FlowLocation[],\n  components: { [key: string]: T.SnippetsByComponent }\n) {\n  let currentComponent = '';\n  let currentGroup: T.SnippetGroup;\n  const groups: T.SnippetGroup[] = [];\n\n  locations.forEach((loc, index) => {\n    if (loc.component !== currentComponent) {\n      currentGroup = {\n        ...(components[loc.component] || unknownComponent(loc.component)),\n        locations: []\n      };\n      groups.push(currentGroup);\n      currentComponent = loc.component;\n    }\n    loc.index = index;\n    currentGroup.locations.push(loc);\n  });\n\n  return groups;\n}\n\nexport function expandSnippet({\n  direction,\n  lines,\n  snippetIndex,\n  snippets\n}: {\n  direction: T.ExpandDirection;\n  lines: T.LineMap;\n  snippetIndex: number;\n  snippets: T.SourceLine[][];\n}) {\n  const snippetToExpand = snippets[snippetIndex];\n\n  const snippetToExpandRange = {\n    start: Math.max(0, snippetToExpand[0].line - (direction === 'up' ? EXPAND_BY_LINES : 0)),\n    end:\n      snippetToExpand[snippetToExpand.length - 1].line +\n      (direction === 'down' ? EXPAND_BY_LINES : 0)\n  };\n\n  const ranges: Array<{ start: number; end: number }> = [];\n\n  snippets.forEach((snippet, index: number) => {\n    const snippetRange = {\n      start: snippet[0].line,\n      end: snippet[snippet.length - 1].line\n    };\n\n    if (index === snippetIndex) {\n      // keep expanded snippet\n      ranges.push(snippetToExpandRange);\n    } else if (\n      collision(\n        [snippetRange.start, snippetRange.end],\n        [snippetToExpandRange.start, snippetToExpandRange.end]\n      )\n    ) {\n      // Merge with expanded snippet\n      snippetToExpandRange.start = Math.min(snippetRange.start, snippetToExpandRange.start);\n      snippetToExpandRange.end = Math.max(snippetRange.end, snippetToExpandRange.end);\n    } else {\n      // No collision, jsut keep the snippet\n      ranges.push(snippetRange);\n    }\n  });\n\n  return rangesToSnippets(ranges, lines);\n}\n\nexport function inSnippet(line: number, snippet: T.SourceLine[]) {\n  return line >= snippet[0].line && line <= snippet[snippet.length - 1].line;\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { inSnippet, LINES_BELOW_LAST } from './utils';\nimport ExpandSnippetIcon from '../../../components/icons-components/ExpandSnippetIcon';\nimport Line from '../../../components/SourceViewer/components/Line';\nimport { symbolsByLine } from '../../../components/SourceViewer/helpers/indexing';\nimport { getSecondaryIssueLocationsForLine } from '../../../components/SourceViewer/helpers/issueLocations';\nimport {\n  optimizeLocationMessage,\n  optimizeHighlightedSymbols,\n  optimizeSelectedIssue\n} from '../../../components/SourceViewer/helpers/lines';\nimport { translate } from '../../../helpers/l10n';\nimport { scrollHorizontally } from '../../../helpers/scrolling';\n\ninterface Props {\n  branchLike: T.BranchLike | undefined;\n  component: T.SourceViewerFile;\n  duplications?: T.Duplication[];\n  duplicationsByLine?: { [line: number]: number[] };\n  expandBlock: (snippetIndex: number, direction: T.ExpandDirection) => void;\n  handleCloseIssues: (line: T.SourceLine) => void;\n  handleLinePopupToggle: (line: T.SourceLine) => void;\n  handleOpenIssues: (line: T.SourceLine) => void;\n  handleSymbolClick: (symbols: string[]) => void;\n  highlightedLocationMessage: { index: number; text: string | undefined } | undefined;\n  highlightedSymbols: string[];\n  index: number;\n  issue: T.Issue;\n  issuePopup?: { issue: string; name: string };\n  issuesByLine: T.IssuesByLine;\n  last: boolean;\n  linePopup?: T.LinePopup;\n  loadDuplications: (line: T.SourceLine) => void;\n  locations: T.FlowLocation[];\n  locationsByLine: { [line: number]: T.LinearIssueLocation[] };\n  onIssueChange: (issue: T.Issue) => void;\n  onIssuePopupToggle: (issue: string, popupName: string, open?: boolean) => void;\n  onLocationSelect: (index: number) => void;\n  openIssuesByLine: T.Dict<boolean>;\n  renderDuplicationPopup: (index: number, line: number) => React.ReactNode;\n  scroll?: (element: HTMLElement) => void;\n  snippet: T.SourceLine[];\n}\n\nconst SCROLL_LEFT_OFFSET = 32;\n\nexport default class SnippetViewer extends React.PureComponent<Props> {\n  node: React.RefObject<HTMLDivElement>;\n\n  constructor(props: Props) {\n    super(props);\n    this.node = React.createRef();\n  }\n\n  doScroll = (element: HTMLElement) => {\n    if (this.props.scroll) {\n      this.props.scroll(element);\n    }\n    const parent = this.node.current as Element;\n\n    if (parent) {\n      scrollHorizontally(element, {\n        leftOffset: SCROLL_LEFT_OFFSET,\n        rightOffset: parent.getBoundingClientRect().width - SCROLL_LEFT_OFFSET,\n        parent\n      });\n    }\n  };\n\n  expandBlock = (direction: T.ExpandDirection) => () =>\n    this.props.expandBlock(this.props.index, direction);\n\n  renderLine({\n    displayDuplications,\n    index,\n    issuesForLine,\n    issueLocations,\n    line,\n    snippet,\n    symbols,\n    verticalBuffer\n  }: {\n    displayDuplications: boolean;\n    index: number;\n    issuesForLine: T.Issue[];\n    issueLocations: T.LinearIssueLocation[];\n    line: T.SourceLine;\n    snippet: T.SourceLine[];\n    symbols: string[];\n    verticalBuffer: number;\n  }) {\n    const secondaryIssueLocations = getSecondaryIssueLocationsForLine(line, this.props.locations);\n\n    const { duplications, duplicationsByLine } = this.props;\n    const duplicationsCount = duplications ? duplications.length : 0;\n    const lineDuplications =\n      (duplicationsCount && duplicationsByLine && duplicationsByLine[line.line]) || [];\n\n    const isSinkLine = issuesForLine.some(i => i.key === this.props.issue.key);\n\n    return (\n      <Line\n        branchLike={this.props.branchLike}\n        displayAllIssues={false}\n        displayCoverage={true}\n        displayDuplications={displayDuplications}\n        displayIssues={!isSinkLine || issuesForLine.length > 1}\n        displayLocationMarkers={true}\n        duplications={lineDuplications}\n        duplicationsCount={duplicationsCount}\n        highlighted={false}\n        highlightedLocationMessage={optimizeLocationMessage(\n          this.props.highlightedLocationMessage,\n          secondaryIssueLocations\n        )}\n        highlightedSymbols={optimizeHighlightedSymbols(symbols, this.props.highlightedSymbols)}\n        issueLocations={issueLocations}\n        issuePopup={this.props.issuePopup}\n        issues={issuesForLine}\n        key={line.line}\n        last={false}\n        line={line}\n        linePopup={this.props.linePopup}\n        loadDuplications={this.props.loadDuplications}\n        onIssueChange={this.props.onIssueChange}\n        onIssuePopupToggle={this.props.onIssuePopupToggle}\n        onIssueSelect={() => {}}\n        onIssueUnselect={() => {}}\n        onIssuesClose={this.props.handleCloseIssues}\n        onIssuesOpen={this.props.handleOpenIssues}\n        onLinePopupToggle={this.props.handleLinePopupToggle}\n        onLocationSelect={this.props.onLocationSelect}\n        onSymbolClick={this.props.handleSymbolClick}\n        openIssues={this.props.openIssuesByLine[line.line]}\n        previousLine={index > 0 ? snippet[index - 1] : undefined}\n        renderDuplicationPopup={this.props.renderDuplicationPopup}\n        scroll={this.doScroll}\n        secondaryIssueLocations={secondaryIssueLocations}\n        selectedIssue={optimizeSelectedIssue(this.props.issue.key, issuesForLine)}\n        verticalBuffer={verticalBuffer}\n      />\n    );\n  }\n\n  render() {\n    const {\n      component,\n      issue,\n      issuesByLine = {},\n      last,\n      locationsByLine,\n      openIssuesByLine,\n      snippet\n    } = this.props;\n    const lastLine =\n      component.measures && component.measures.lines && parseInt(component.measures.lines, 10);\n\n    const symbols = symbolsByLine(snippet);\n\n    const bottomLine = snippet[snippet.length - 1].line;\n    const issueLine = issue.textRange ? issue.textRange.endLine : issue.line;\n    const lowestVisibleIssue = Math.max(\n      ...Object.keys(issuesByLine)\n        .map(k => parseInt(k, 10))\n        .filter(l => inSnippet(l, snippet) && (l === issueLine || openIssuesByLine[l]))\n    );\n    const verticalBuffer = last\n      ? Math.max(0, LINES_BELOW_LAST - (bottomLine - lowestVisibleIssue))\n      : 0;\n\n    const displayDuplications = snippet.some(s => !!s.duplicated);\n\n    return (\n      <div className=\"source-viewer-code snippet\" ref={this.node}>\n        <table className=\"source-table\">\n          <tbody>\n            {snippet[0].line > 1 && (\n              <tr className=\"expand-block expand-block-above\">\n                <td colSpan={5}>\n                  <button\n                    aria-label={translate('source_viewer.expand_above')}\n                    onClick={this.expandBlock('up')}\n                    type=\"button\">\n                    <ExpandSnippetIcon />\n                  </button>\n                </td>\n              </tr>\n            )}\n            {snippet.map((line, index) =>\n              this.renderLine({\n                displayDuplications,\n                index,\n                issuesForLine: issuesByLine[line.line] || [],\n                issueLocations: locationsByLine[line.line] || [],\n                line,\n                snippet,\n                symbols: symbols[line.line],\n                verticalBuffer: index === snippet.length - 1 ? verticalBuffer : 0\n              })\n            )}\n            {(!lastLine || snippet[snippet.length - 1].line < lastLine) && (\n              <tr className=\"expand-block expand-block-below\">\n                <td colSpan={5}>\n                  <button\n                    aria-label={translate('source_viewer.expand_below')}\n                    onClick={this.expandBlock('down')}\n                    type=\"button\">\n                    <ExpandSnippetIcon />\n                  </button>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { createSnippets, expandSnippet, EXPAND_BY_LINES, MERGE_DISTANCE } from './utils';\nimport SnippetViewer from './SnippetViewer';\nimport SourceViewerHeaderSlim from '../../../components/SourceViewer/SourceViewerHeaderSlim';\nimport getCoverageStatus from '../../../components/SourceViewer/helpers/getCoverageStatus';\nimport { getSources } from '../../../api/components';\nimport { locationsByLine } from '../../../components/SourceViewer/helpers/indexing';\nimport { getBranchLikeQuery } from '../../../helpers/branches';\n\ninterface Props {\n  branchLike: T.BranchLike | undefined;\n  duplications?: T.Duplication[];\n  duplicationsByLine?: { [line: number]: number[] };\n  highlightedLocationMessage: { index: number; text: string | undefined } | undefined;\n  issue: T.Issue;\n  issuePopup?: { issue: string; name: string };\n  issuesByLine: T.IssuesByLine;\n  last: boolean;\n  linePopup?: T.LinePopup;\n  loadDuplications: (component: string, line: T.SourceLine) => void;\n  locations: T.FlowLocation[];\n  onIssueChange: (issue: T.Issue) => void;\n  onIssuePopupToggle: (issue: string, popupName: string, open?: boolean) => void;\n  onLinePopupToggle: (linePopup: T.LinePopup & { component: string }) => void;\n  onLocationSelect: (index: number) => void;\n  renderDuplicationPopup: (\n    component: T.SourceViewerFile,\n    index: number,\n    line: number\n  ) => React.ReactNode;\n  scroll?: (element: HTMLElement) => void;\n  snippetGroup: T.SnippetGroup;\n}\n\ninterface State {\n  additionalLines: { [line: number]: T.SourceLine };\n  highlightedSymbols: string[];\n  loading: boolean;\n  openIssuesByLine: T.Dict<boolean>;\n  snippets: T.SourceLine[][];\n}\n\nexport default class ComponentSourceSnippetViewer extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = {\n    additionalLines: {},\n    highlightedSymbols: [],\n    loading: false,\n    openIssuesByLine: {},\n    snippets: []\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.createSnippetsFromProps();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  createSnippetsFromProps() {\n    const snippets = createSnippets(\n      this.props.snippetGroup.locations,\n      this.props.snippetGroup.sources,\n      this.props.last\n    );\n    this.setState({ snippets });\n  }\n\n  expandBlock = (snippetIndex: number, direction: T.ExpandDirection) => {\n    const { branchLike, snippetGroup } = this.props;\n    const { key } = snippetGroup.component;\n    const { snippets } = this.state;\n\n    const snippet = snippets[snippetIndex];\n\n    // Extend by EXPAND_BY_LINES and add buffer for merging snippets\n    const extension = EXPAND_BY_LINES + MERGE_DISTANCE - 1;\n\n    const range =\n      direction === 'up'\n        ? {\n            from: Math.max(1, snippet[0].line - extension),\n            to: snippet[0].line - 1\n          }\n        : {\n            from: snippet[snippet.length - 1].line + 1,\n            to: snippet[snippet.length - 1].line + extension\n          };\n\n    getSources({\n      key,\n      ...range,\n      ...getBranchLikeQuery(branchLike)\n    })\n      .then(lines =>\n        lines.reduce((lineMap: T.Dict<T.SourceLine>, line) => {\n          line.coverageStatus = getCoverageStatus(line);\n          lineMap[line.line] = line;\n          return lineMap;\n        }, {})\n      )\n      .then(\n        newLinesMapped => {\n          if (this.mounted) {\n            this.setState(({ additionalLines, snippets }) => {\n              const combinedLines = { ...additionalLines, ...newLinesMapped };\n\n              return {\n                additionalLines: combinedLines,\n                snippets: expandSnippet({\n                  direction,\n                  lines: { ...combinedLines, ...this.props.snippetGroup.sources },\n                  snippetIndex,\n                  snippets\n                })\n              };\n            });\n          }\n        },\n        () => {}\n      );\n  };\n\n  expandComponent = () => {\n    const { branchLike, snippetGroup } = this.props;\n    const { key } = snippetGroup.component;\n\n    this.setState({ loading: true });\n\n    getSources({ key, ...getBranchLikeQuery(branchLike) }).then(\n      lines => {\n        if (this.mounted) {\n          this.setState({ loading: false, snippets: [lines] });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  handleLinePopupToggle = (linePopup: T.LinePopup) => {\n    this.props.onLinePopupToggle({\n      ...linePopup,\n      component: this.props.snippetGroup.component.key\n    });\n  };\n\n  handleOpenIssues = (line: T.SourceLine) => {\n    this.setState(state => ({\n      openIssuesByLine: { ...state.openIssuesByLine, [line.line]: true }\n    }));\n  };\n\n  handleCloseIssues = (line: T.SourceLine) => {\n    this.setState(state => ({\n      openIssuesByLine: { ...state.openIssuesByLine, [line.line]: false }\n    }));\n  };\n\n  handleSymbolClick = (highlightedSymbols: string[]) => {\n    this.setState({ highlightedSymbols });\n  };\n\n  loadDuplications = (line: T.SourceLine) => {\n    this.props.loadDuplications(this.props.snippetGroup.component.key, line);\n  };\n\n  renderDuplicationPopup = (index: number, line: number) => {\n    return this.props.renderDuplicationPopup(this.props.snippetGroup.component, index, line);\n  };\n\n  renderSnippet({\n    index,\n    issuesByLine,\n    last,\n    locationsByLine,\n    snippet\n  }: {\n    index: number;\n    issuesByLine: T.IssuesByLine;\n    last: boolean;\n    locationsByLine: { [line: number]: T.LinearIssueLocation[] };\n    snippet: T.SourceLine[];\n  }) {\n    return (\n      <SnippetViewer\n        branchLike={this.props.branchLike}\n        component={this.props.snippetGroup.component}\n        expandBlock={this.expandBlock}\n        handleCloseIssues={this.handleCloseIssues}\n        handleLinePopupToggle={this.handleLinePopupToggle}\n        handleOpenIssues={this.handleOpenIssues}\n        handleSymbolClick={this.handleSymbolClick}\n        highlightedLocationMessage={this.props.highlightedLocationMessage}\n        highlightedSymbols={this.state.highlightedSymbols}\n        index={index}\n        issue={this.props.issue}\n        issuePopup={this.props.issuePopup}\n        issuesByLine={issuesByLine}\n        key={index}\n        last={last}\n        loadDuplications={this.loadDuplications}\n        locations={this.props.locations}\n        locationsByLine={locationsByLine}\n        onIssueChange={this.props.onIssueChange}\n        onIssuePopupToggle={this.props.onIssuePopupToggle}\n        onLocationSelect={this.props.onLocationSelect}\n        openIssuesByLine={this.state.openIssuesByLine}\n        renderDuplicationPopup={this.renderDuplicationPopup}\n        scroll={this.props.scroll}\n        snippet={snippet}\n      />\n    );\n  }\n\n  render() {\n    const { branchLike, duplications, issue, issuesByLine, last, snippetGroup } = this.props;\n    const { loading, snippets } = this.state;\n    const locations = locationsByLine([issue]);\n\n    const fullyShown =\n      snippets.length === 1 &&\n      snippetGroup.component.measures &&\n      snippets[0].length === parseInt(snippetGroup.component.measures.lines || '', 10);\n\n    return (\n      <div\n        className={classNames('component-source-container', {\n          'source-duplications-expanded': duplications && duplications.length > 0\n        })}>\n        <SourceViewerHeaderSlim\n          branchLike={branchLike}\n          expandable={!fullyShown}\n          loading={loading}\n          onExpand={this.expandComponent}\n          sourceViewerFile={snippetGroup.component}\n        />\n        {snippets.map((snippet, index) =>\n          this.renderSnippet({\n            snippet,\n            index,\n            issuesByLine: last ? issuesByLine : {},\n            locationsByLine: last && index === snippets.length - 1 ? locations : {},\n            last: last && index === snippets.length - 1\n          })\n        )}\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ComponentSourceSnippetViewer from './ComponentSourceSnippetViewer';\nimport { groupLocationsByComponent } from './utils';\nimport DeferredSpinner from '../../../components/common/DeferredSpinner';\nimport DuplicationPopup from '../../../components/SourceViewer/components/DuplicationPopup';\nimport { SourceViewerContext } from '../../../components/SourceViewer/SourceViewerContext';\nimport { WorkspaceContext } from '../../../components/workspace/context';\nimport { getIssueFlowSnippets } from '../../../api/issues';\nimport {\n  filterDuplicationBlocksByLine,\n  isDuplicationBlockInRemovedComponent,\n  getDuplicationBlocksForIndex\n} from '../../../components/SourceViewer/helpers/duplications';\nimport {\n  duplicationsByLine,\n  issuesByComponentAndLine\n} from '../../../components/SourceViewer/helpers/indexing';\nimport { getDuplications } from '../../../api/components';\nimport { getBranchLikeQuery } from '../../../helpers/branches';\n\ninterface Props {\n  branchLike: T.Branch | T.PullRequest | undefined;\n  highlightedLocationMessage?: { index: number; text: string | undefined };\n  issue: T.Issue;\n  issues: T.Issue[];\n  locations: T.FlowLocation[];\n  onIssueChange: (issue: T.Issue) => void;\n  onLoaded?: () => void;\n  onLocationSelect: (index: number) => void;\n  scroll?: (element: HTMLElement) => void;\n  selectedFlowIndex: number | undefined;\n}\n\ninterface State {\n  components: T.Dict<T.SnippetsByComponent>;\n  duplicatedFiles?: T.Dict<T.DuplicatedFile>;\n  duplications?: T.Duplication[];\n  duplicationsByLine: { [line: number]: number[] };\n  issuePopup?: { issue: string; name: string };\n  linePopup?: T.LinePopup & { component: string };\n  loading: boolean;\n}\n\nexport default class CrossComponentSourceViewerWrapper extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = {\n    components: {},\n    duplicationsByLine: {},\n    loading: true\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchIssueFlowSnippets(this.props.issue.key);\n  }\n\n  componentWillReceiveProps(newProps: Props) {\n    if (newProps.issue.key !== this.props.issue.key) {\n      this.fetchIssueFlowSnippets(newProps.issue.key);\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchDuplications = (component: string, line: T.SourceLine) => {\n    getDuplications({\n      key: component,\n      ...getBranchLikeQuery(this.props.branchLike)\n    }).then(\n      r => {\n        if (this.mounted) {\n          this.setState(state => ({\n            duplicatedFiles: r.files,\n            duplications: r.duplications,\n            duplicationsByLine: duplicationsByLine(r.duplications),\n            linePopup:\n              r.duplications.length === 1\n                ? { component, index: 0, line: line.line, name: 'duplications' }\n                : state.linePopup\n          }));\n        }\n      },\n      () => {}\n    );\n  };\n\n  fetchIssueFlowSnippets(issueKey: string) {\n    this.setState({ loading: true });\n    getIssueFlowSnippets(issueKey).then(\n      components => {\n        if (this.mounted) {\n          this.setState({\n            components,\n            issuePopup: undefined,\n            linePopup: undefined,\n            loading: false\n          });\n          if (this.props.onLoaded) {\n            this.props.onLoaded();\n          }\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  }\n\n  handleIssuePopupToggle = (issue: string, popupName: string, open?: boolean) => {\n    this.setState((state: State) => {\n      const samePopup =\n        state.issuePopup && state.issuePopup.name === popupName && state.issuePopup.issue === issue;\n      if (open !== false && !samePopup) {\n        return { issuePopup: { issue, name: popupName } };\n      } else if (open !== true && samePopup) {\n        return { issuePopup: undefined };\n      }\n      return null;\n    });\n  };\n\n  handleLinePopupToggle = ({\n    component,\n    index,\n    line,\n    name,\n    open\n  }: T.LinePopup & { component: string }) => {\n    this.setState((state: State) => {\n      const samePopup =\n        state.linePopup !== undefined &&\n        state.linePopup.line === line &&\n        state.linePopup.name === name &&\n        state.linePopup.component === component &&\n        state.linePopup.index === index;\n      if (open !== false && !samePopup) {\n        return { linePopup: { component, index, line, name } };\n      } else if (open !== true && samePopup) {\n        return { linePopup: undefined };\n      }\n      return null;\n    });\n  };\n\n  handleCloseLinePopup = () => {\n    this.setState({ linePopup: undefined });\n  };\n\n  renderDuplicationPopup = (component: T.SourceViewerFile, index: number, line: number) => {\n    const { duplicatedFiles, duplications } = this.state;\n\n    if (!component || !duplicatedFiles) {\n      return null;\n    }\n\n    const blocks = getDuplicationBlocksForIndex(duplications, index);\n\n    return (\n      <WorkspaceContext.Consumer>\n        {({ openComponent }) => (\n          <DuplicationPopup\n            blocks={filterDuplicationBlocksByLine(blocks, line)}\n            branchLike={this.props.branchLike}\n            duplicatedFiles={duplicatedFiles}\n            inRemovedComponent={isDuplicationBlockInRemovedComponent(blocks)}\n            onClose={this.handleCloseLinePopup}\n            openComponent={openComponent}\n            sourceViewerFile={component}\n          />\n        )}\n      </WorkspaceContext.Consumer>\n    );\n  };\n\n  render() {\n    const { loading } = this.state;\n\n    if (loading) {\n      return (\n        <div>\n          <DeferredSpinner />\n        </div>\n      );\n    }\n\n    const { components, duplications, duplicationsByLine, linePopup } = this.state;\n    const issuesByComponent = issuesByComponentAndLine(this.props.issues);\n    const locationsByComponent = groupLocationsByComponent(this.props.locations, components);\n\n    return (\n      <div>\n        {locationsByComponent.map((snippetGroup, i) => {\n          let componentProps = {};\n          if (linePopup && snippetGroup.component.key === linePopup.component) {\n            componentProps = {\n              duplications,\n              duplicationsByLine,\n              linePopup: { index: linePopup.index, line: linePopup.line, name: linePopup.name }\n            };\n          }\n          return (\n            <SourceViewerContext.Provider\n              key={`${this.props.issue.key}-${this.props.selectedFlowIndex}-${i}`}\n              value={{ branchLike: this.props.branchLike, file: snippetGroup.component }}>\n              <ComponentSourceSnippetViewer\n                branchLike={this.props.branchLike}\n                highlightedLocationMessage={this.props.highlightedLocationMessage}\n                issue={this.props.issue}\n                issuePopup={this.state.issuePopup}\n                issuesByLine={issuesByComponent[snippetGroup.component.key] || {}}\n                last={i === locationsByComponent.length - 1}\n                loadDuplications={this.fetchDuplications}\n                locations={snippetGroup.locations || []}\n                onIssueChange={this.props.onIssueChange}\n                onIssuePopupToggle={this.handleIssuePopupToggle}\n                onLinePopupToggle={this.handleLinePopupToggle}\n                onLocationSelect={this.props.onLocationSelect}\n                renderDuplicationPopup={this.renderDuplicationPopup}\n                scroll={this.props.scroll}\n                snippetGroup={snippetGroup}\n                {...componentProps}\n              />\n            </SourceViewerContext.Provider>\n          );\n        })}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}