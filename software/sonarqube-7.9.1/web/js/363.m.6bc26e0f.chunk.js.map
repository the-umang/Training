{"version":3,"sources":["webpack:///./src/main/js/components/common/AnalysisWarningsModal.tsx","webpack:///./src/main/js/components/controls/Modal.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","AnalysisWarningsModal","react__WEBPACK_IMPORTED_MODULE_0__","_DeferredSpinner__WEBPACK_IMPORTED_MODULE_1__","_controls_Modal__WEBPACK_IMPORTED_MODULE_2__","_ui_buttons__WEBPACK_IMPORTED_MODULE_3__","_helpers_l10n__WEBPACK_IMPORTED_MODULE_4__","_icons_components_WarningIcon__WEBPACK_IMPORTED_MODULE_5__","_api_ce__WEBPACK_IMPORTED_MODULE_6__","[object Object]","props","super","this","mounted","keepLineBreaks","warning","includes","lines","split","map","line","index","key","length","state","loading","warnings","taskId","loadWarnings","prevProps","_this$props","setState","Object","then","_ref","_ref$warnings","header","contentLabel","onRequestClose","onClose","className","onClick","Modal","react_modal__WEBPACK_IMPORTED_MODULE_1__","classnames__WEBPACK_IMPORTED_MODULE_2__","assign","modal-small","size","modal-medium","modal-large","isOpen","overlayClassName","modal-no-backdrop","noBackdrop"],"mappings":"6FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAAE,IAAA,IAAAC,EAAAL,EAAA,KAAAM,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KAAAQ,EAAAR,EAAA,KAAAS,EAAAT,EAAA,GAAAU,EAAAV,EAAA,KAAAW,EAAAX,EAAA,KAsCe,MAAMI,UAA8BC,EAAA,cAGjDO,YAAYC,GACVC,MAAMD,GAHRE,KAAAC,SAAU,EA2CVD,KAAAE,eAAkBC,IAChB,GAAIA,EAAQC,SAAS,MAAO,CAC1B,MAAMC,EAAQF,EAAQG,MAAM,MAC5B,OACEhB,EAAA,cAAAA,EAAA,cACGe,EAAME,IAAI,CAACC,EAAMC,IAChBnB,EAAA,cAACA,EAAA,SAAc,CAACoB,IAAKD,GAClBD,EACAC,EAAQJ,EAAMM,OAAS,GAAKrB,EAAA,4BAMrC,OAAOa,GArDTH,KAAKY,MAAQ,CAAEC,SAAUf,EAAMgB,SAAUA,SAAUhB,EAAMgB,UAAY,IAGvEjB,oBACEG,KAAKC,SAAU,GACVD,KAAKF,MAAMgB,UAAYd,KAAKF,MAAMiB,QACrCf,KAAKgB,aAAahB,KAAKF,MAAMiB,QAIjClB,mBAAmBoB,GAAgB,MAAAC,EACJlB,KAAKF,MAA1BiB,EADyBG,EACzBH,OAAQD,EADiBI,EACjBJ,UACXA,GAAYC,GAAUE,EAAUF,SAAWA,EAC9Cf,KAAKgB,aAAaD,GACTD,GAAYG,EAAUH,WAAaA,GAC5Cd,KAAKmB,SAAS,CAAEL,aAIpBjB,uBACEG,KAAKC,SAAU,EAGjBJ,aAAakB,GACXf,KAAKmB,SAAS,CAAEN,SAAS,IACzBO,OAAAxB,EAAA,EAAAwB,CAAQL,EAAQ,CAAC,aAAaM,KAC5BC,IAAsB,IAAAC,EAAAD,EAAnBR,gBAAmB,IAAAS,EAAR,GAAQA,EAChBvB,KAAKC,SACPD,KAAKmB,SAAS,CAAEN,SAAS,EAAOC,cAGpC,KACMd,KAAKC,SACPD,KAAKmB,SAAS,CAAEN,SAAS,MAwBjChB,SACE,MAAM2B,EAASJ,OAAA1B,EAAA,EAAA0B,CAAU,YACzB,OACE9B,EAAA,cAACE,EAAA,EAAK,CAACiC,aAAcD,EAAQE,eAAgB1B,KAAKF,MAAM6B,SACtDrC,EAAA,wBAAQsC,UAAU,cAChBtC,EAAA,wBAAKkC,IAGPlC,EAAA,qBAAKsC,UAAU,mDACbtC,EAAA,cAACC,EAAA,EAAe,CAACsB,QAASb,KAAKY,MAAMC,SAClCb,KAAKY,MAAME,SAASP,IAAI,CAACJ,EAASM,IACjCnB,EAAA,qBAAKsC,UAAU,uBAAuBlB,IAAKD,GACzCnB,EAAA,cAACK,EAAA,EAAW,CAACiC,UAAU,2BACvBtC,EAAA,qBAAKsC,UAAU,4BAA4B5B,KAAKE,eAAeC,QAMvEb,EAAA,wBAAQsC,UAAU,cAChBtC,EAAA,cAACG,EAAA,EAAe,CAACmC,UAAU,iBAAiBC,QAAS7B,KAAKF,MAAM6B,SAC7DP,OAAA1B,EAAA,EAAA0B,CAAU,gDCzHvBnC,EAAAG,EAAAD,EAAA,sBAAA2C,IAAA,IAAAxC,EAAAL,EAAA,KAAA8C,EAAA9C,EAAA,KAAA+C,EAAA/C,EAAA,KAmCe,SAAS6C,EAAMhC,GAC5B,OACER,EAAA,cAACyC,EAAUX,OAAAa,OAAA,CACTL,UAAWI,EAAW,QAAS,CAC7BE,cAA8B,UAAfpC,EAAMqC,KACrBC,eAA+B,WAAftC,EAAMqC,KACtBE,cAA8B,UAAfvC,EAAMqC,OAEvBG,QAAQ,EACRC,iBAAkBP,EAAW,gBAAiB,CAAEQ,oBAAqB1C,EAAM2C,cACvE3C,IAtBViC,EAAA,cAAyB","file":"js/363.m.6bc26e0f.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport DeferredSpinner from './DeferredSpinner';\nimport Modal from '../controls/Modal';\nimport { ResetButtonLink } from '../ui/buttons';\nimport { translate } from '../../helpers/l10n';\nimport WarningIcon from '../icons-components/WarningIcon';\nimport { getTask } from '../../api/ce';\n\ninterface Props {\n  onClose: () => void;\n  taskId?: string;\n  warnings?: string[];\n}\n\ninterface State {\n  loading: boolean;\n  warnings: string[];\n}\n\nexport default class AnalysisWarningsModal extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { loading: !props.warnings, warnings: props.warnings || [] };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    if (!this.props.warnings && this.props.taskId) {\n      this.loadWarnings(this.props.taskId);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { taskId, warnings } = this.props;\n    if (!warnings && taskId && prevProps.taskId !== taskId) {\n      this.loadWarnings(taskId);\n    } else if (warnings && prevProps.warnings !== warnings) {\n      this.setState({ warnings });\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  loadWarnings(taskId: string) {\n    this.setState({ loading: true });\n    getTask(taskId, ['warnings']).then(\n      ({ warnings = [] }) => {\n        if (this.mounted) {\n          this.setState({ loading: false, warnings });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  }\n\n  keepLineBreaks = (warning: string) => {\n    if (warning.includes('\\n')) {\n      const lines = warning.split('\\n');\n      return (\n        <>\n          {lines.map((line, index) => (\n            <React.Fragment key={index}>\n              {line}\n              {index < lines.length - 1 && <br />}\n            </React.Fragment>\n          ))}\n        </>\n      );\n    } else {\n      return warning;\n    }\n  };\n\n  render() {\n    const header = translate('warnings');\n    return (\n      <Modal contentLabel={header} onRequestClose={this.props.onClose}>\n        <header className=\"modal-head\">\n          <h2>{header}</h2>\n        </header>\n\n        <div className=\"modal-body modal-container js-analysis-warnings\">\n          <DeferredSpinner loading={this.state.loading}>\n            {this.state.warnings.map((warning, index) => (\n              <div className=\"panel panel-vertical\" key={index}>\n                <WarningIcon className=\"pull-left spacer-right\" />\n                <div className=\"overflow-hidden markdown\">{this.keepLineBreaks(warning)}</div>\n              </div>\n            ))}\n          </DeferredSpinner>\n        </div>\n\n        <footer className=\"modal-foot\">\n          <ResetButtonLink className=\"js-modal-close\" onClick={this.props.onClose}>\n            {translate('close')}\n          </ResetButtonLink>\n        </footer>\n      </Modal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport * as ReactModal from 'react-modal';\nimport * as classNames from 'classnames';\n\nReactModal.setAppElement('#content');\n\nexport interface ModalProps {\n  children: React.ReactNode;\n  size?: 'small' | 'medium' | 'large';\n  noBackdrop?: boolean;\n}\n\ntype MandatoryProps = Pick<ReactModal.Props, 'contentLabel'>;\n\ntype Props = Partial<ReactModal.Props> & MandatoryProps & ModalProps;\n\nexport default function Modal(props: Props) {\n  return (\n    <ReactModal\n      className={classNames('modal', {\n        'modal-small': props.size === 'small',\n        'modal-medium': props.size === 'medium',\n        'modal-large': props.size === 'large'\n      })}\n      isOpen={true}\n      overlayClassName={classNames('modal-overlay', { 'modal-no-backdrop': props.noBackdrop })}\n      {...props}\n    />\n  );\n}\n"],"sourceRoot":""}